{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:44424/api/Cart';\n    this.cartItemsSubject = new Subject();\n    this.cartItems = [];\n  }\n  addToCart(item, quantity) {\n    //const existingCartItem = this.cartItems.find((cartItem) => cartItem.item.id === item.id);\n    //if (existingCartItem) {\n    //  existingCartItem.quantity += quantity;\n    //} else {\n    //  this.cartItems.push({ item, quantity });\n    //}\n  }\n  getCartItems() {\n    return this.http.get(this.apiUrl);\n  }\n  //getCartItemCount(): number {\n  //  return this.cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n  //}\n  getCartItem(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  getCartItemCount() {\n    return this.http.get(`${this.apiUrl}/count`);\n  }\n  addCartItem(cartItem) {\n    return this.http.post(this.apiUrl, cartItem);\n  }\n  updateCartItem(id, cartItem) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, cartItem);\n  }\n  deleteCartItem(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n  // Add this method to emit cart item changes\n  emitCartItemsChanged(cartItems) {\n    this.cartItemsSubject.next(cartItems);\n  }\n  // Subscribe to this method to get updates\n  onCartItemsChanged() {\n    return this.cartItemsSubject.asObservable();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,OAAO,QAAQ,MAAM;;;AAO1C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,kCAAkC;IAC3C,qBAAgB,GAAG,IAAIH,OAAO,EAAS;IAGvC,cAAS,GAAuC,EAAE;EAFlB;EAIxCI,SAAS,CAACC,IAAU,EAAEC,QAAgB;IACpC;IAEA;IACA;IACA;IACA;IACA;EAAA;EAGFC,YAAY;IACV,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC;EAC3C;EAEA;EACA;EACA;EAEAC,WAAW,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAOI,GAAG,CAAC;EACjC;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC;EACtD;EAEAK,WAAW,CAACC,QAAc;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,IAAI,CAACP,MAAM,EAAEM,QAAQ,CAAC;EACpD;EAEAE,cAAc,CAACN,EAAU,EAAEI,QAAc;IACvC,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACR,IAAI,CAACe,GAAG,CAACN,GAAG,EAAEG,QAAQ,CAAC;EACrC;EAEAI,cAAc,CAACR,EAAU;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACR,IAAI,CAACiB,MAAM,CAACR,GAAG,CAAC;EAC9B;EAEA;EACAS,oBAAoB,CAACC,SAAgB;IACnC,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAACF,SAAS,CAAC;EACvC;EAEA;EACAG,kBAAkB;IAChB,OAAO,IAAI,CAACF,gBAAgB,CAACG,YAAY,EAAE;EAC7C;;AAxDWzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["Subject","CartService","constructor","http","addToCart","item","quantity","getCartItems","get","apiUrl","getCartItem","id","url","getCartItemCount","addCartItem","cartItem","post","updateCartItem","put","deleteCartItem","delete","emitCartItemsChanged","cartItems","cartItemsSubject","next","onCartItemsChanged","asObservable","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\panch\\source\\repos\\ED.Api\\ED.Web\\ClientApp\\src\\app\\Services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Item } from '../Models/Item';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartService {\r\n  private apiUrl = 'https://localhost:44424/api/Cart';\r\n  private cartItemsSubject = new Subject<any[]>();\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private cartItems: { item: Item; quantity: number }[] = [];\r\n\r\n  addToCart(item: Item, quantity: number): void {\r\n    //const existingCartItem = this.cartItems.find((cartItem) => cartItem.item.id === item.id);\r\n\r\n    //if (existingCartItem) {\r\n    //  existingCartItem.quantity += quantity;\r\n    //} else {\r\n    //  this.cartItems.push({ item, quantity });\r\n    //}\r\n  }\r\n\r\n  getCartItems(): Observable<Item[]> {\r\n    return this.http.get<Item[]>(this.apiUrl);\r\n  }\r\n\r\n  //getCartItemCount(): number {\r\n  //  return this.cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\r\n  //}\r\n\r\n  getCartItem(id: number): Observable<Item> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.get<Item>(url);\r\n  }\r\n\r\n  getCartItemCount(): Observable<number> {    \r\n    return this.http.get<number>(`${this.apiUrl}/count`);\r\n  }\r\n\r\n  addCartItem(cartItem: Item): Observable<Item> {\r\n    return this.http.post<Item>(this.apiUrl, cartItem);\r\n  }\r\n\r\n  updateCartItem(id: number, cartItem: Item): Observable<any> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.put(url, cartItem);\r\n  }\r\n\r\n  deleteCartItem(id: number): Observable<any> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.delete(url);\r\n  }\r\n\r\n  // Add this method to emit cart item changes\r\n  emitCartItemsChanged(cartItems: any[]): void {\r\n    this.cartItemsSubject.next(cartItems);\r\n  }\r\n\r\n  // Subscribe to this method to get updates\r\n  onCartItemsChanged(): Observable<any[]> {\r\n    return this.cartItemsSubject.asObservable();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}