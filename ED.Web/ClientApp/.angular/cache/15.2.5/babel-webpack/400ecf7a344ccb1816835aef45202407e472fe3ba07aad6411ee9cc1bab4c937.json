{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:44424/api/items'; // Replace this with your API endpoint\n  }\n\n  getItem(itemId) {\n    const url = `${this.apiUrl}/${itemId}`;\n    return this.http.get(url).pipe(catchError(error => {\n      console.error('Error fetching item:', error);\n      throw error;\n    }));\n  }\n}\nItemService.ɵfac = function ItemService_Factory(t) {\n  return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient));\n};\nItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ItemService,\n  factory: ItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,mCAAmC,CAAC,CAAC;EAEf;;EAEvCC,OAAO,CAACC,MAAc;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIF,MAAM,EAAE;IACtC,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAAOF,GAAG,CAAC,CAACG,IAAI,CAClCT,UAAU,CAAEU,KAAU,IAAI;MACxBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AAbWT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAW,SAAXX,WAAW;EAAAY,YAFV;AAAM","names":["catchError","ItemService","constructor","http","getItem","itemId","url","apiUrl","get","pipe","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\panch\\source\\repos\\ED.Api\\ED.Web\\ClientApp\\src\\app\\Services\\item.service.ts"],"sourcesContent":["// item.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Item } from '../Models/Item';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ItemService {\r\n  private apiUrl = 'https://localhost:44424/api/items'; // Replace this with your API endpoint\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getItem(itemId: number): Observable<Item> {\r\n    const url = `${this.apiUrl}/${itemId}`;\r\n    return this.http.get<Item>(url).pipe(\r\n      catchError((error: any) => {\r\n        console.error('Error fetching item:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}